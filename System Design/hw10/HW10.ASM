TITLE	.HW10 (EXE) SORT
	.MODEL	SMALL
	.STACK	64
	.DATA

SOURCE_FILE	DB	16	DUP	(0H)
DEST_FILE	DB	16	DUP	(0H)
SOURCE_HANDLE	DW	?
DEST_HANDLE	DW	?
TEMP_FILE	DB	00H;
TEMP_HANDLE	DW	?

READ_HANDLE	DW	?
WRITE_HANDLE	DW	?


RECORD_SIZE	EQU	32	;MAXIMUM RECORD SIZE
BUFLIST_1	LABEL	BYTE
LENGTH_1	DW	?
BUFFER_1	DB	RECORD_SIZE	DUP	(00H)

BUFLIST_2	LABEL	BYTE
LENGTH_2	DW	?
BUFFER_2	DB	RECORD_SIZE	DUP	(00H)

BUFFER_INDEX	DW	?
BUFFER_0	DB	RECORD_SIZE	DUP	(00H)

BUFFER_COPY	DB	RECORD_SIZE DUP (00H)


ERROR_LENGTH	DB	34
ERROR_1	DB	'ERROR : WRONG INPUT PARAMETER   ', 0DH, 0AH
ERROR_2	DB	'ERROR : SOURCE FILE OPEN FAIL   ', 0DH, 0AH
ERROR_3	DB	'ERROR : DEST FILE CREATE FAIL   ', 0DH, 0AH
ERROR_4	DB	'ERROR : FILE COPY FAIL          ', 0DH, 0AH
ERROR_5	DB	'ERROR : READ RECORD FAIL        ', 0DH, 0AH
ERROR_6	DB	'ERROR : TEMP FILE CREATE FAIL   ', 0DH, 0AH
ERROR_7	DB	'ERROR : WRITE RECORD FAIL       ',	0DH, 0AH
ERROR_8	DB	'ERROR : DUPLICATE HANDLE FAIL   ', 0DH, 0AH
TRUE	EQU	1
FALSE	EQU	0

IS_ERROR	DB	FALSE	; 	0(FALSE) : NO ERROR, 
						;	1(TRUE) : ERROR

IS_FINISH	DB	FALSE
IS_CHANGE	DB	FALSE	;	CHECK AT LEAST CHNAGE RECORD ONCE
;------------------------------------
	.CODE
A10_MAIN	PROC	NEAR
	MOV	AX, @data
	MOV	DS, AX
	MOV	ES, AX

	CALL	B10_GET_PARAM
	CMP	IS_ERROR,	TRUE
	JE	A90_END

	CALL	C10_OPEN_FILE
	CMP	IS_ERROR,	TRUE
	JE	A90_END

	CALL	D10_CREATE_FILE
	CMP	IS_ERROR,	TRUE
	JE	A90_END

	CALL	H10_CREATE_TEMP
	CMP	IS_ERROR,	TRUE
	JE	A90_END

	CALL	E10_COPY_DATA
	CMP IS_ERROR,	TRUE
	JE	A90_END

	CALL	F10_SORT
	CMP	IS_ERROR,	TRUE
	JE	A90_END


A90_END:
	MOV	AX, 4C00H
	INT	21H
A10_MAIN	ENDP


;	GET FILE NAMES FROM DTA
;	-------------------------------
B10_GET_PARAM	PROC	NEAR
	PUSH	ES			;SAVE ES
	PUSH	DS			; AND DS
	
	; SET ES AND DS WITH PSP
	MOV	AH,	51H
	INT	21H
	MOV	ES,	BX
	MOV	DS,	BX
	
	; GET SOURCE FILE NAME
	MOV	AL,	20H
	MOV	CL,	DS:[80H]
	MOV	CH,	0
	MOV	DI,	82H

	REPNZ	SCASB
	JNZ	B90_ERROR

	; COPY SOURCE FILE NAME TO SOURCE_FILE
	PUSH	DI
	PUSH	SI
	PUSH	CX
	PUSH	ES

	DEC	DI
	MOV	CX,	DI
	SUB	CX,	82H
	MOV	SI,	82H
	MOV	AX,	@data
	MOV	ES,	AX
	LEA	DI,	SOURCE_FILE
	REP	MOVSB

	POP ES
	POP	CX
	POP	SI
	POP	DI

	; GET DESTINATION FILE NAME
	MOV	SI,	DI
	MOV	AL,	0DH

	REPNZ	SCASB
	JNZ	B90_ERROR

	; COPY DESTINATION FILE NAME TO DEST_FILE
	DEC	DI
	MOV	CX,	DI
	SUB	CX, SI

	MOV	AX,	@data
	MOV	ES,	AX
	LEA	DI,	DEST_FILE
	REP	MOVSB

	JMP B92_EXIT


B90_ERROR:
	MOV	AX, @data
	MOV	DS, AX
	
	MOV IS_ERROR, TRUE

	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_1
	CALL	Z10_DISPLAY

	JMP	B92_EXIT
B92_EXIT:
	POP	DS
	POP	ES
	RET

B10_GET_PARAM	ENDP


;	OPEN SOURCE FILE
;	-----------------------------------
C10_OPEN_FILE	PROC	NEAR
	MOV	AX,	3D00H	;REQUEST OPEN, READ ONLY
	LEA	DX,	SOURCE_FILE
	INT	21H
	JNC	B20

	; ON ERROR

	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_2
	CALL	Z10_DISPLAY

	JMP	C90_EXIT

B20:
	; ON FILE OPEN SUCCESSFULLY
	MOV	SOURCE_HANDLE, AX

	JMP C90_EXIT 
C90_EXIT:
	RET
C10_OPEN_FILE	ENDP

;	CREATE DESTINATION FILE
;	------------------------------------
D10_CREATE_FILE	PROC	NEAR
	MOV	AH,	3CH
	MOV	CX,	00H
	LEA	DX, DEST_FILE
	INT	21H
	JNC	D20

	; ON ERROR

	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_3
	CALL	Z10_DISPLAY

	JMP	D90_EXIT

D20:
	MOV	DEST_HANDLE, AX
D90_EXIT:
	RET
D10_CREATE_FILE ENDP

;	COPY DATA FROM SOURCE TO DESTINATION
;	--------------------------------------
E10_COPY_DATA	PROC	NEAR

	LEA	DX,	BUFFER_COPY
	MOV	CX,	RECORD_SIZE
	
E20_LOOP:
	; READ FROM SOURCE AND COPY THEM TO BUFFER
	MOV	AH,	3FH
	MOV	BX,	SOURCE_HANDLE
	INT	21H
	JC	E90_ERROR
	CMP	AX,	00H		; READ 0 BYTE
	JE	E91_EXIT	; THEN EXIT.

	;WRITE BUFFER DATA TO DESTINATION FILE
	MOV	AH, 40H
	MOV	BX,	DEST_HANDLE
	INT	21H
	JC	E90_ERROR
	CMP	AX,	RECORD_SIZE	;WRITE SUCCESSLY?
	JNE	E90_ERROR	; NO! THEN ERROR
	JE	E20_LOOP


E90_ERROR:
	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_4
	CALL	Z10_DISPLAY

	JMP	D90_EXIT
E91_EXIT:
	RET
E10_COPY_DATA	ENDP

F10_SORT	PROC	NEAR
	
	MOV	AX, DEST_HANDLE
	MOV	READ_HANDLE,	AX
	MOV	AX,	TEMP_HANDLE
	MOV	WRITE_HANDLE,	AX

	
	
F19_INIT_LOOP:

	MOV	IS_CHANGE,	FALSE
	MOV	IS_FINISH,	FALSE
	;	FIRST, RESET FILE POINTER
	MOV	AH,	42H
	MOV	AL,	00H
	MOV	BX,	READ_HANDLE
	MOV	CX,	00
	MOV	DX,	00
	INT	21H
	JNC	F191_CONTINUE
	JMP	F90_ERROR
F191_CONTINUE:

	MOV	AH,	42H
	MOV	AL,	00H
	MOV	BX,	WRITE_HANDLE
	MOV	CX,	00
	MOV	DX,	00
	INT	21H
	JNC	F192_CONTINUE
	JMP	F90_ERROR
F192_CONTINUE:


	; NOTE :
	;	SI IS FRONT RECORD, AND DI IS BACK RECORD.
	
	;LOAD FIRST RECORD
	LEA	SI,	BUFLIST_1

	LEA	DI,	BUFLIST_1
	CALL	G10_LOAD_RECORD
	CMP	IS_ERROR,	TRUE
	JNE	F193_CONTINUE
	JMP F91_EXIT
F193_CONTINUE:
	CMP	IS_FINISH,	TRUE
	JNE	F194_CONTINUE
	JMP	F26_FINISH

F194_CONTINUE:
	LEA	DI, BUFLIST_2

F20_LOOP:


	;	LOAD NEW RECORD TO DI'S BUFFER
	CALL	G10_LOAD_RECORD
	CMP	IS_ERROR,	TRUE
	JNE F201_CONTINUE
	JMP	F91_EXIT
F201_CONTINUE:
	CMP	IS_FINISH,	TRUE
	JNE	F202_CONTINUE
	JMP	F26_FINISH
F202_CONTINUE:
	;	SET CX WITH TWO BUFFER'S MINIMUM LENGTH
	MOV	CX,	WORD PTR [DI]
	CMP	CX, WORD PTR [SI]
	JB	F21_DI_SAMLLER	
	MOV	CX,	WORD PTR [SI]
F21_DI_SAMLLER:

	MOV BX, 0
F22_CMP_LOOP:
	CMP	BX,	CX
	JE	F25_SAVE_DI

	MOV	AH,	[SI + 2 + BX]
	CMP	AH, [DI + 2 + BX]
	JB	F23_SMALL_FRONT
	JE	F24_EQAUL
	; ABOBE -> CHANGED
	MOV	IS_CHANGE,	TRUE
	JMP	F25_SAVE_DI

	;	REMEMBER, BIG ONE IS CONTINUELY SET ON SI
F23_SMALL_FRONT:
	INT 3
	;	EXCHANGE	BUFFER
	MOV	AX,	SI
	MOV	SI,	DI
	MOV	DI,	AX
	JMP	F25_SAVE_DI

F24_EQAUL:
	INC	BX
	JMP	F22_CMP_LOOP

F25_SAVE_DI:
	INT 3
	MOV	AH,	40H
	MOV	BX,	WRITE_HANDLE
	MOV	CX,	WORD PTR [DI]
	MOV	DX,	DI
	ADD	DX,	2
	INT	21H
	JC	F90_ERROR
	CMP	AX,	WORD PTR [DI]
	JNE	F90_ERROR

	JMP	F20_LOOP

F26_FINISH:
	INT 3

	; SAVE SI
	INT 3
	MOV	AH,	40H
	MOV	BX,	WRITE_HANDLE
	MOV	CX,	WORD PTR [SI]
	MOV	DX,	SI
	ADD	DX,	2
	INT	21H
	JC	F90_ERROR
	CMP	AX,	WORD PTR [SI]
	JNE	F90_ERROR

	; CHECK SORT IS REALLY FINISH
	CMP	IS_CHANGE,	FALSE
	JE	F27_REALLY_FIN

	;	CHANGE READ AND WRITE HANDLE
	MOV	AX,	READ_HANDLE
	MOV	BX,	WRITE_HANDLE
	MOV	READ_HANDLE,	BX
	MOV	WRITE_HANDLE,	AX
	JMP	F19_INIT_LOOP

F27_REALLY_FIN:
	;CMP	READ_HANDLE,	DEST_HANDLE
	JE	F91_EXIT




F90_ERROR:
	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_7
	CALL	Z10_DISPLAY
	JMP	G92_EXIT
F91_EXIT:
	RET
F10_SORT	ENDP

;	LOAD RECORD TO [DI]
;	DESTINATION : DI
;-------------------------------------------------
G10_LOAD_RECORD	PROC	NEAR

	PUSH	SI
	MOV	WORD PTR [DI], 00
G20_LOOP:
	CMP	BUFFER_INDEX,	00H	;IF NOT YET FINISH USE BUFFER
	JNE	G30_CONTINUE					;THEN CONTINUE
										;OR LOAD NEW RECORD
	MOV	AH,	3FH
	MOV	BX,	READ_HANDLE
	MOV	CX,	RECORD_SIZE
	LEA	DX,	BUFFER_0
	INT	21H
	JC	G90_ERROR
	CMP	AX,	00
	JE	G91_END_FILE

G30_CONTINUE:
	MOV	BX,	WORD PTR [DI]
	LEA	SI, BUFFER_0
	ADD	SI,	BUFFER_INDEX
	MOV	AH, [SI]
	MOV	[DI + 2 + BX],	AH
	INC	WORD PTR [DI]

	INC	BUFFER_INDEX
	CMP	BUFFER_INDEX, RECORD_SIZE
	JNE G31_CONTINUE
	MOV	BUFFER_INDEX, 00H
	
G31_CONTINUE:
	;	CHECK THAT RECORD IS FINISHED 
	CMP	WORD PTR [DI], 2	;AT LEAST, 2 BYTE READ
	JB	G20_LOOP
	MOV	BX,	WORD PTR [DI]
	SUB	BX,	2
	CMP	WORD PTR [DI + 2 + BX],	0D0AH
	JE	G92_EXIT
	CMP	WORD PTR [DI + 2 + BX],	0A0DH
	JE	G92_EXIT
	JMP G20_LOOP

G90_ERROR:
	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_5
	CALL	Z10_DISPLAY
	JMP	G92_EXIT

G91_END_FILE:
	MOV	IS_FINISH,	TRUE
	JMP	G92_EXIT

G92_EXIT:
	POP	SI
	RET
G10_LOAD_RECORD	ENDP


;	CREATE TEMPORARY FILE
;	------------------------------------
H10_CREATE_TEMP	PROC	NEAR
	MOV	AH,	5AH
	MOV	CX,	00H
	LEA	DX, TEMP_FILE
	INT	21H
	JNC	H20
	
	; ON ERROR

	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_6
	CALL	Z10_DISPLAY

	JMP	H90_EXIT

H20:
	MOV	TEMP_HANDLE, AX
H90_EXIT:
	RET
H10_CREATE_TEMP ENDP

; CLOSE FILES
;	-----------------------
X10_CLOSE_FILE	PROC	NEAR
	MOV	AH,	3EH
	MOV	BX,	SOURCE_HANDLE
	INT	21H

	MOV	BX,	DEST_HANDLE
	INT 21H
	JC	X90_ERROR
	JMP	X91_EXIT
X90_ERROR:

	MOV IS_ERROR, TRUE
	MOV	CL, ERROR_LENGTH
	MOV	CH, 0
	LEA	DX, ERROR_6
	CALL	Z10_DISPLAY

X91_EXIT:
	RET
X10_CLOSE_FILE	ENDP


;	DISPLAY. 	CX : NUMBER OF CHARACTERS
;				DX : ADDRESS OF STRING
;	------------------------------------
Z10_DISPLAY	PROC	NEAR
	PUSH	AX
	PUSH	BX
	MOV	AH, 40H
	MOV	BX,	01
	INT	21H
	POP BX
	POP	AX
	RET
Z10_DISPLAY	ENDP



	END	A10_MAIN